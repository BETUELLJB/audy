<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;
use App\Services\LogService; // Importação do LogService

class RegisteredUserController extends Controller
{
    /**
     * Exibir todos os utilizadores.
     */
    public function index(Request $request)
    {
        $users = User::all(); // Lista de utilizadores
        $editUser = null;
    
        if ($request->has('edit')) {
            $editUser = User::find($request->edit); // Carrega o utilizador a ser editado
        }
    
        return view('funcionario.user_index', compact('users', 'editUser'));
    }

    /**
     * Exibir a página de registo.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Criar um novo utilizador.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:users,email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
            'nivel_acesso' => ['required', 'in:admin,gerente,operador'], // Validação para o nível de acesso
        ]);

        DB::beginTransaction();
        try {
            $user = User::create([
                'name' => $request->name,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'nivel_acesso' => $request->nivel_acesso,
            ]);

            event(new Registered($user));

            // Registar log da criação do utilizador
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'model_id' => $user->id,
                'action' => 'create',
                'changes' => $user->getAttributes(),
                'message' => "Utilizador {$user->name} criado com sucesso.",
                'ip_address' => $request->ip(),
                'status' => 'success',
            ]);

            DB::commit(); // Confirma as alterações
            return redirect()->route('users.index')->with('success', 'Utilizador criado com sucesso!');
        } catch (\Exception $e) {
            DB::rollBack(); // Reverte as alterações

            // Registar log de erro
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'action' => 'create',
                'message' => "Erro ao criar utilizador: {$e->getMessage()}",
                'ip_address' => $request->ip(),
                'status' => 'error',
            ]);

            return redirect()->back()->with('error', 'Erro ao criar utilizador: ' . $e->getMessage());
        }
    }

    /**
     * Atualizar um utilizador existente.
     */
    public function update(Request $request, User $user): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:users,email,' . $user->id],
            'nivel_acesso' => ['required', 'in:admin,gerente,operador'], // Validação para o nível de acesso
            'password' => ['nullable', 'confirmed', Rules\Password::defaults()],
        ]);

        DB::beginTransaction();
        try {
            $oldAttributes = $user->getAttributes();

            $user->update([
                'name' => $request->name,
                'email' => $request->email,
                'nivel_acesso' => $request->nivel_acesso,
                'password' => $request->password ? Hash::make($request->password) : $user->password,
            ]);

            // Registar log da atualização
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'model_id' => $user->id,
                'action' => 'update',
                'changes' => ['before' => $oldAttributes, 'after' => $user->getAttributes()],
                'message' => "Utilizador {$user->name} atualizado com sucesso.",
                'ip_address' => $request->ip(),
                'status' => 'success',
            ]);

            DB::commit(); // Confirma as alterações
            return redirect()->route('users.index')->with('success', 'Utilizador atualizado com sucesso!');
        } catch (\Exception $e) {
            DB::rollBack(); // Reverte as alterações

            // Registar log de erro
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'action' => 'update',
                'message' => "Erro ao atualizar utilizador: {$e->getMessage()}",
                'ip_address' => $request->ip(),
                'status' => 'error',
            ]);

            return redirect()->back()->with('error', 'Erro ao atualizar utilizador: ' . $e->getMessage());
        }
    }

    /**
     * Excluir um utilizador.
     */
    public function destroy(User $user): RedirectResponse
    {
        DB::beginTransaction();
        try {
            $userName = $user->name;
            $user->delete();

            // Registar log da exclusão
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'model_id' => $user->id,
                'action' => 'delete',
                'message' => "Utilizador {$userName} excluído.",
                'ip_address' => request()->ip(),
                'status' => 'success',
            ]);

            DB::commit(); // Confirma as alterações
            return redirect()->route('users.index')->with('success', 'Utilizador excluído com sucesso!');
        } catch (\Exception $e) {
            DB::rollBack(); // Reverte as alterações

            // Registar log de erro
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name,
                'model' => User::class,
                'action' => 'delete',
                'message' => "Erro ao excluir utilizador: {$e->getMessage()}",
                'ip_address' => request()->ip(),
                'status' => 'error',
            ]);

            return redirect()->back()->with('error', 'Erro ao excluir utilizador: ' . $e->getMessage());
        }
    }
}<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Services\LogService; // Importação do LogService

class CheckAccess
{
    public function handle(Request $request, Closure $next, ...$roles)
    {
        // Verificar se o usuário está autenticado
        if (!Auth::check()) {
            // Registrar tentativa de acesso não autenticado
            LogService::record([
                'user_id' => null, // Usuário não autenticado
                'user_name' => 'Visitante',
                'model' => 'Middleware',
                'action' => 'unauthorized_access',
                'status' => 'error',
                'message' => 'Tentativa de acesso não autenticada.',
                'ip_address' => $request->ip(),
            ]);

            return redirect()->route('login')->with('error', 'Usuarios não autenticado');
        }

        // Obter o nível de acesso do usuário autenticado
        $userRole = Auth::user()->nivel_acesso;

        if (is_null($userRole) || !in_array($userRole, $roles)) {
            // Registrar tentativa de acesso negado
            LogService::record([
                'user_id' => Auth::id(),
                'user_name' => Auth::user()->name ?? 'Usuário Desconhecido',
                'model' => 'Middleware',
                'action' => 'access_denied',
                'status' => 'error',
                'message' => "Acesso negado. Papel do usuário: " . ($userRole ?? 'não definido') . ".",
                'ip_address' => $request->ip(),
            ]);
        
            return redirect()->route('dashboard')->with('error', 'Acesso não autorizado!');
        }
        
        // Passar para o próximo middleware ou controlador
        return $next($request);
    }
}<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Crypt;
use App\Models\Funcionario;
use App\Services\LogService; // Importação do LogService

class FuncionarioController extends Controller
{
    public function index()
    {
    
        $funcionarios = Funcionario::all();
        return view('funcionario.index', compact('funcionarios'));
    }

    public function create()
    {
        
        return view('funcionarios.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'nome' => 'required|string|max:255',
            'password'=> 'required|min:8',
            'email' => 'required|email|unique:funcionarios',
            'contacto' => 'required|string|max:255',
            'idade' => 'required|integer',
            'sexo' => 'required|string',
            'bi' => 'required|string',
            'data_nascimento' => 'required|string',
            'data_expiracao' => 'required|string',
            'tipo_trabalho' => 'required|string',
            'cartao_credito' => 'required|string',
            'NIB' => 'required|string',
            'rua' => 'required|string',
            'cidade' => 'required|string',
            'codigo_postal' => 'required|string',
            'pais' => 'required|string',
            'condicao_saude' => 'required|string',
            'medicamento' => 'required|string',
            'historico_comportamento' => 'required|string',
        ]);
        
        DB::beginTransaction();
        try {
            $funcionario = Funcionario::create($request->all());

            // Registrar log de sucesso
            LogService::record([
                'user_id' => auth()->id(),
                'user_name' => auth()->user()->name,
                'model' => Funcionario::class,
                'model_id' => $funcionario->id,
                'action' => 'create',
                'changes' => $funcionario->toArray(),
                'status' => 'success',
                'message' => 'Funcionário criado com sucesso.',
                'ip_address' => $request->ip(),
            ]);

            DB::commit(); // Confirma as alterações no banco de dados

            return redirect()->route('funcoinario.index')->with('success', 'funcoinario criado com sucesso!');
        } catch (\Exception $e) {
            DB::rollBack(); // Reverte as alterações no banco de dados em caso de erro

            // Registrar log de erro
            LogService::record([
                'user_id' => auth()->id(),
                'user_name' => auth()->user()->name,
                'model' => Funcionario::class,
                'action' => 'create',
                'status' => 'error',
                'message' => 'Erro ao criar funcionario: ' . $e->getMessage(),
                'ip_address' => $request->ip(),
            ]);

            return redirect()->back()->with('error', 'Erro ao criar funcoinario.');
        }
    }

    public function show(Funcionario $funcionario)
    {
        return view('funcionarios.show', compact('funcionario'));
    }

    public function edit(Funcionario $funcionario)
    {
        return view('funcionarios.edit', compact('funcionario'));
    }

    public function update(Request $request, Funcionario $funcionario)
    {
        // Validação dos campos
        $request->validate([
            'nome' => 'required|string|max:255',
            'password' => 'nullable|min:8',
            'email' => 'required|email|unique:funcionarios,email,' . $funcionario->id,
            'contacto' => 'required|string|max:255',
            'idade' => 'required|integer',
            'sexo' => 'required|string',
            'bi' => 'required|string',
            'data_nascimento' => 'required|string',
            'data_expiracao' => 'required|string',
            'tipo_trabalho' => 'required|string',
            'cartao_credito' => 'required|string',
            'NIB' => 'required|string',
            'rua' => 'required|string',
            'cidade' => 'required|string',
            'codigo_postal' => 'required|string',
            'pais' => 'required|string',
            'condicao_saude' => 'required|string',
            'medicamento' => 'required|string',
            'historico_comportamento' => 'required|string',
        ]);
    
        try {
            // Iniciar transação
            DB::beginTransaction();
    
            $data = $request->all();
    
            // Encriptação do e-mail
            if ($request->filled('email')) {
                $data['email'] = Crypt::encryptString($data['email']);
            }
    
            // Atualização da senha apenas se fornecida
            if ($request->filled('password')) {
                $data['password'] = bcrypt($data['password']);
            }
    
            // Atualizar os dados do funcionário
            $funcionario->update($data);
    
            // Commit da transação
            DB::commit();
    
            return redirect()->route('funcionario.index')->with('success', 'Funcionário atualizado com sucesso.');
        } catch (\Exception $e) {
            // Reverter transação em caso de erro
            DB::rollBack();
            return redirect()->route('funcionario.index')->with('error', 'Erro ao atualizar o funcionário: ' . $e->getMessage());
        }
    }
    
    public function destroy(Funcionario $funcionario)
    {
        try {
            // Iniciar transação
            DB::beginTransaction();
    
            // Apagar o funcionário
            $funcionario->delete();
    
            // Commit da transação
            DB::commit();
    
            return redirect()->route('funcionarios.index')->with('success', 'Funcionário removido com sucesso.');
        } catch (\Exception $e) {
            // Reverter transação em caso de erro
            DB::rollBack();
            return redirect()->route('funcionarios.index')->with('error', 'Erro ao remover o funcionário: ' . $e->getMessage());
        }
    }
    
}<?php
namespace App\Http\Controllers;

use App\Models\Log;

class LogController extends Controller
{
    public function index()
    {
        $logs = Log::latest()->paginate(20); // Recupera os logs com paginação
        return view('logs.index', compact('logs')); // Passa os logs para a view
    }
}'google' => [
    'client_id' => env('GOOGLE_CLIENT_ID'),
    'client_secret' => env('GOOGLE_CLIENT_SECRET'),
    'redirect' => env('GOOGLE_REDIRECT_URI'),
],




